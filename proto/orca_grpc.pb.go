// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/orca.proto

package orca

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrcaClient is the client API for Orca service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrcaClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayReply, error)
	Skip(ctx context.Context, in *GuildOnlyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Stop(ctx context.Context, in *GuildOnlyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Seek(ctx context.Context, in *SeekRequest, opts ...grpc.CallOption) (*SeekReply, error)
	GetTracks(ctx context.Context, in *GetTracksRequest, opts ...grpc.CallOption) (*GetTracksReply, error)
	Pause(ctx context.Context, in *GuildOnlyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Resume(ctx context.Context, in *GuildOnlyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Loop(ctx context.Context, in *GuildOnlyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type orcaClient struct {
	cc grpc.ClientConnInterface
}

func NewOrcaClient(cc grpc.ClientConnInterface) OrcaClient {
	return &orcaClient{cc}
}

func (c *orcaClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/orca.Orca/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayReply, error) {
	out := new(PlayReply)
	err := c.cc.Invoke(ctx, "/orca.Orca/Play", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaClient) Skip(ctx context.Context, in *GuildOnlyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/orca.Orca/Skip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaClient) Stop(ctx context.Context, in *GuildOnlyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/orca.Orca/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaClient) Seek(ctx context.Context, in *SeekRequest, opts ...grpc.CallOption) (*SeekReply, error) {
	out := new(SeekReply)
	err := c.cc.Invoke(ctx, "/orca.Orca/Seek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaClient) GetTracks(ctx context.Context, in *GetTracksRequest, opts ...grpc.CallOption) (*GetTracksReply, error) {
	out := new(GetTracksReply)
	err := c.cc.Invoke(ctx, "/orca.Orca/GetTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaClient) Pause(ctx context.Context, in *GuildOnlyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/orca.Orca/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaClient) Resume(ctx context.Context, in *GuildOnlyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/orca.Orca/Resume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaClient) Loop(ctx context.Context, in *GuildOnlyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/orca.Orca/Loop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrcaServer is the server API for Orca service.
// All implementations must embed UnimplementedOrcaServer
// for forward compatibility
type OrcaServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Play(context.Context, *PlayRequest) (*PlayReply, error)
	Skip(context.Context, *GuildOnlyRequest) (*emptypb.Empty, error)
	Stop(context.Context, *GuildOnlyRequest) (*emptypb.Empty, error)
	Seek(context.Context, *SeekRequest) (*SeekReply, error)
	GetTracks(context.Context, *GetTracksRequest) (*GetTracksReply, error)
	Pause(context.Context, *GuildOnlyRequest) (*emptypb.Empty, error)
	Resume(context.Context, *GuildOnlyRequest) (*emptypb.Empty, error)
	Loop(context.Context, *GuildOnlyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedOrcaServer()
}

// UnimplementedOrcaServer must be embedded to have forward compatible implementations.
type UnimplementedOrcaServer struct {
}

func (UnimplementedOrcaServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedOrcaServer) Play(context.Context, *PlayRequest) (*PlayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedOrcaServer) Skip(context.Context, *GuildOnlyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Skip not implemented")
}
func (UnimplementedOrcaServer) Stop(context.Context, *GuildOnlyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedOrcaServer) Seek(context.Context, *SeekRequest) (*SeekReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Seek not implemented")
}
func (UnimplementedOrcaServer) GetTracks(context.Context, *GetTracksRequest) (*GetTracksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTracks not implemented")
}
func (UnimplementedOrcaServer) Pause(context.Context, *GuildOnlyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedOrcaServer) Resume(context.Context, *GuildOnlyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resume not implemented")
}
func (UnimplementedOrcaServer) Loop(context.Context, *GuildOnlyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Loop not implemented")
}
func (UnimplementedOrcaServer) mustEmbedUnimplementedOrcaServer() {}

// UnsafeOrcaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrcaServer will
// result in compilation errors.
type UnsafeOrcaServer interface {
	mustEmbedUnimplementedOrcaServer()
}

func RegisterOrcaServer(s grpc.ServiceRegistrar, srv OrcaServer) {
	s.RegisterService(&Orca_ServiceDesc, srv)
}

func _Orca_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Orca/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orca_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Orca/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServer).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orca_Skip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServer).Skip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Orca/Skip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServer).Skip(ctx, req.(*GuildOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orca_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Orca/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServer).Stop(ctx, req.(*GuildOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orca_Seek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServer).Seek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Orca/Seek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServer).Seek(ctx, req.(*SeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orca_GetTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServer).GetTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Orca/GetTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServer).GetTracks(ctx, req.(*GetTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orca_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Orca/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServer).Pause(ctx, req.(*GuildOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orca_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Orca/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServer).Resume(ctx, req.(*GuildOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orca_Loop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServer).Loop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Orca/Loop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServer).Loop(ctx, req.(*GuildOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Orca_ServiceDesc is the grpc.ServiceDesc for Orca service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orca_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orca.Orca",
	HandlerType: (*OrcaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Orca_Register_Handler,
		},
		{
			MethodName: "Play",
			Handler:    _Orca_Play_Handler,
		},
		{
			MethodName: "Skip",
			Handler:    _Orca_Skip_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Orca_Stop_Handler,
		},
		{
			MethodName: "Seek",
			Handler:    _Orca_Seek_Handler,
		},
		{
			MethodName: "GetTracks",
			Handler:    _Orca_GetTracks_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Orca_Pause_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _Orca_Resume_Handler,
		},
		{
			MethodName: "Loop",
			Handler:    _Orca_Loop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/orca.proto",
}
