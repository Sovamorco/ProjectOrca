// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/orca.proto

package orca

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrcaClient is the client API for Orca service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrcaClient interface {
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayReply, error)
}

type orcaClient struct {
	cc grpc.ClientConnInterface
}

func NewOrcaClient(cc grpc.ClientConnInterface) OrcaClient {
	return &orcaClient{cc}
}

func (c *orcaClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayReply, error) {
	out := new(PlayReply)
	err := c.cc.Invoke(ctx, "/orca.Orca/Play", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrcaServer is the server API for Orca service.
// All implementations must embed UnimplementedOrcaServer
// for forward compatibility
type OrcaServer interface {
	Play(context.Context, *PlayRequest) (*PlayReply, error)
	mustEmbedUnimplementedOrcaServer()
}

// UnimplementedOrcaServer must be embedded to have forward compatible implementations.
type UnimplementedOrcaServer struct {
}

func (UnimplementedOrcaServer) Play(context.Context, *PlayRequest) (*PlayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedOrcaServer) mustEmbedUnimplementedOrcaServer() {}

// UnsafeOrcaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrcaServer will
// result in compilation errors.
type UnsafeOrcaServer interface {
	mustEmbedUnimplementedOrcaServer()
}

func RegisterOrcaServer(s grpc.ServiceRegistrar, srv OrcaServer) {
	s.RegisterService(&Orca_ServiceDesc, srv)
}

func _Orca_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orca.Orca/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServer).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Orca_ServiceDesc is the grpc.ServiceDesc for Orca service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orca_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orca.Orca",
	HandlerType: (*OrcaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Play",
			Handler:    _Orca_Play_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/orca.proto",
}
